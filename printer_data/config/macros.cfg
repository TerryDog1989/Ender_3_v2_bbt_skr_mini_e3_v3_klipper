#=====================================================
# MANUAL SET CAPTURE TARGET
#=====================================================
[gcode_macro GPHOTO_SET_TARGET]
gcode:
    RUN_SHELL_COMMAND CMD=gphoto2_set_config

#=====================================================
# TAKE SNAPSHOT COMMAND
#=====================================================
[gcode_macro TAKE_SNAPSHOT]
description: Saves current location, moves toolhead to rear of bed, and takes a snapshot before returning.
gcode:
  {% set delayMS1 = 2000 %} ; Delay after moving and before taking the snapshot, deals with buffering so we don't get the print head in motion
  {% set delayMS2 = 100 %} ; Delay after moving and before taking the snapshot, deals with buffering so we don't get the print head in motion
  {% set snapshotPositionX = printer.toolhead.axis_maximum.x - 30 %} ; Middle of bed
  {% set snapshotPositionY = printer.toolhead.axis_maximum.y - 5 %} ; rear of bed w/ some buffer
  {% set currentX = printer.gcode_move.gcode_position.x %}
  {% set currentY = printer.gcode_move.gcode_position.y %}
  {% set currentZ = printer.gcode_move.gcode_position.z %} ; could be used for z-hop which we are not doing in this macro, so it's best to run this in AFTER_LAYER_CHANGE
  SAVE_GCODE_STATE NAME=take_snapshot_state

  {% if printer.extruder.can_extrude|lower == 'true' %}
    G10 ; retract
  {% endif %}

  G90

  G0 X{snapshotPositionX} Y{snapshotPositionY} F30000.0 ;Move to snapshot position
 
  G4 P{delayMS1} ; Dwell for delayMS seconds

  RUN_SHELL_COMMAND CMD=gphoto2_trigger_snapshot

  G4 P{delayMS2} ; Dwell for delayMS seconds

  G0 X230 Y225 F30000
  {% for wipe in range(16) %}
    {% for coordinate in [(232,225),(258,225)] %}
      G0 X{coordinate[0]} Y{coordinate[1] - 0 * wipe} F15000
    {% endfor %}
  {% endfor %}
  
  G0 X{currentX} Y{currentY} F30000.0 ;Return to original position

  {% if printer.extruder.can_extrude|lower == 'true' %}
    G11 ; unretract
  {% endif %}

  RESTORE_GCODE_STATE NAME=take_snapshot_state

#=====================================================
# MANUAL SNAPSHOT TEST
#=====================================================
[gcode_macro GPHOTO_SNAPSHOT_TEST]
gcode:
    RUN_SHELL_COMMAND CMD=gphoto2_trigger_snapshot

#=====================================================
# DSLR
#=====================================================
[gcode_macro DSLR]
gcode:
    SET_PIN PIN=DSLR value=1
    G4 P500
    SET_PIN PIN=DSLR value=0

#=====================================================
# SPEED TEST
#=====================================================
[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

#=====================================================
# Z OFFSET CALIBRATE
#=====================================================
[gcode_macro ZOffsetCalibrate]
gcode:
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=170
  #SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=70
  G28
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM=169 MAXIMUM=171
  #TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=69 MAXIMUM=71
  probe_calibrate
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  #SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0

#=====================================================
# UNLOAD FILAMENT
#=====================================================
[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  90
variable_purge_distance:  35
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 20 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

#=====================================================
# LOAD FILAMENT
#=====================================================
[gcode_macro LOAD_FILAMENT]
variable_load_distance:  80
variable_purge_distance:  80
gcode:
    {% set speed = params.SPEED|default(200) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 5 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # slow-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

#=====================================================
# PIDs MACRO LIST
#=====================================================
[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  {% set e = printer.toolhead.extruder %}
  {% set T = params.TEMPERATURE|default(235)|float %}
  {% set S = params.FAN_IN_PERCENT|default(100)|float *2.55 %}
  {% set P = printer.configfile.config[e].pid_kp|float %}
  {% set I = printer.configfile.config[e].pid_ki|float %}
  {% set D = printer.configfile.config[e].pid_kd|float %}
  M118 Homing...
  G28
  M106 S{S}
  M118 // PID parameters: pid_Kp={P} pid_Ki={I} pid_Kd={D}  (old)
  M118 Extruder PID calibration...
  PID_CALIBRATE HEATER={e} TARGET={T}
  TURN_OFF_HEATERS
  M107
  SAVE_CONFIG

[gcode_macro PID_BED]
description: PID Tune for the Bed
gcode:
  {% set T = params.TEMPERATURE|default(70)|float %}
  {% set P = printer.configfile.config['heater_bed'].pid_kp|float %}
  {% set I = printer.configfile.config['heater_bed'].pid_ki|float %}
  {% set D = printer.configfile.config['heater_bed'].pid_kd|float %}
  M118 Homing...
  G28
  M118 // PID parameters: pid_Kp={P} pid_Ki={I} pid_Kd={D}  (old)
  M118 Bed PID calibration...
  PID_CALIBRATE HEATER=heater_bed TARGET={T}
  TURN_OFF_HEATERS
  SAVE_CONFIG

[gcode_macro PID_ALL]
description: Heater and Bed temperature calibration. Usage: PID_ALL [TE=temperature] [TB=temperature]\n Calibra la temperatura del extrusor y la cama. Uso: PID_ALL [TE=temperatura] [TB=temperature]
gcode:
    {% set e = printer.toolhead.extruder %}
    {% set S = params.FAN_IN_PERCENT|default(100)|float *2.55 %}
    {% set TE = params.TE|default(195)|int %}
    {% set TB = params.TB|default(45)|int %}
    M118 Homing...
	G28
	M118 Extruder PID calibration...
    M106 S{S}
	PID_CALIBRATE HEATER={e} TARGET={TE}
	M107
	M118 Bed PID calibration...
	PID_CALIBRATE HEATER=heater_bed TARGET={TB}
	SAVE_CONFIG

#=====================================================
# ADXL SHARPER
#=====================================================
[gcode_macro ADXL_SHAPE_ALL]
description: Test resonances for both axis
gcode:
    M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
    HOME_IF_NEEDED
    SHAPER_CALIBRATE AXIS=x
    SHAPER_CALIBRATE AXIS=y
    RUN_SHELL_COMMAND CMD=adxl_shape_x
    RUN_SHELL_COMMAND CMD=adxl_shape_y
    M118 Test done
    SAVE_AND_RESTART

[gcode_macro ADXL_SHAPE_X]
description: Test resonances for X axis
gcode:
    M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
    HOME_IF_NEEDED
    SHAPER_CALIBRATE AXIS=x
    RUN_SHELL_COMMAND CMD=adxl_shape_x
    M118 Test done
    SAVE_AND_RESTART

[gcode_macro ADXL_SHAPE_Y]
description: Test resonances for Y axis
gcode:
    M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
    HOME_IF_NEEDED
    SHAPER_CALIBRATE AXIS=y
    RUN_SHELL_COMMAND CMD=adxl_shape_y
    M118 Test done
    SAVE_AND_RESTART

[gcode_shell_command adxl_shape_x]
command: sh ~/printer_data/config/shaper/adxl_shape_x.sh		# edit: ´/macro/shell_commands/´ to where your .sh file lays
timeout: 60.
verbose: True

[gcode_shell_command adxl_shape_y]
command: sh ~/printer_data/config/shaper/adxl_shape_y.sh		# edit: ´/macro/shell_commands/´ to where your .sh file lays
timeout: 60.
verbose: True

### name file: adxl_shape_x.sh
#~/klipper/scripts/calibrate_shaper.py /tmp/calibration_data_x_*.csv -o ~/printer_data/config/shaper_calibrate_x.png

### name file: adxl_shape_y.sh
#~/klipper/scripts/calibrate_shaper.py /tmp/calibration_data_y_*.csv -o ~/printer_data/config/shaper_calibrate_y.png

#=====================================================
# PARKING
#=====================================================
# Park front center
[gcode_macro PARKFRONT]
gcode:
    HOME_IF_NEEDED                              ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    HOME_IF_NEEDED                             ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    HOME_IF_NEEDED                             ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKREARCENTER]
gcode:
    HOME_IF_NEEDED                             ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKREARCENTER
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREARCENTER

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    HOME_IF_NEEDED                              ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    HOME_IF_NEEDED                               ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

# Park 50mm above center of bed
[gcode_macro PARKBED_MID]
gcode:
    HOME_IF_NEEDED                               ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z50 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

#=====================================================
# TEST RESONANCES
#=====================================================
[gcode_macro TEST_RESONANCES]
rename_existing: TEST_RESONANCES_BASE
gcode:
    STATUS_VIBRATING
    TEST_RESONANCES_BASE {rawparams}
    CLEAR_STATUS

#=====================================================
# LIMPIEZA DE BOQUILLA
#=====================================================
[gcode_macro clean_nozzle]
gcode:
  SAVE_GCODE_STATE NAME=clean_nozzle_state
  G90
  G0 X230 Y225 F30000
  {% for wipe in range(10) %}
    {% for coordinate in [(232,225),(258,225)] %}
      G0 X{coordinate[0]} Y{coordinate[1] - 0 * wipe} F15000
    {% endfor %}
  {% endfor %}
  G0 X230 Y225 F30000
  RESTORE_GCODE_STATE NAME=clean_nozzle_state

#=====================================================
#KLIPPER BACKUP 
#=====================================================
[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh $0"
timeout: 90.0
verbose: True